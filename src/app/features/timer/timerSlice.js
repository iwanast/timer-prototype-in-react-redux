import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  value: 5,
  status: "idle",
  pause: false,
}

/*
THUNK function: (typically used for async requests)
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount) => {
    const response = await fetchCount(amount);
    return response.data;
  }
);
*/

export const timerSlice = createSlice({
  name: "timer",
  initialState,
  reducers: {
    // because of Redux toolkit which uses the Immer library can I write mutable logic but Immer will make the changes immutable
    decrement: (state) => {
        state.value -= 1;
    },
    pause: (state) => {
      state.pause = "true"
      state.status = "idle"
    },
    start: (state) => {
      state.pause = "false"
      state.status = "active"
    },
    // We will see what the best design will be for showing a break... 
    timeForBreak : (state) => {
      state.value = "BREAK"
      state.status = "idle"
    },
    reset: (state) => {
      state.value = initialState.value; 
      state.status = initialState.status;
      state.pause = initialState.pause;
    },
  },
  /*
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
       .addCase(incrementAsync.pending, (state) => { 
          state.status = "loading";
        })
       .addCase(incrementAsync.fulfilled, (state) => {
        state.status = "idle"; 
        state.value += action.payload;
        })
  },
*/

});

export const { decrement, reset, timeForBreak, pause, start } = timerSlice.actions; 

// This selector allows to use a value of the state. Can also be defined inline but I did it now here
export const selectTime = (state) => state.timer.value
export const selectStatusTimer = (state) => state.timer.status
export const selectStatusPause = (state) => state.timer.pause

// THUNKS written by hand, here conditionally dispatching

export const startTimer = () => (dispatch, getState) => {
  dispatch(start())
  const startedTimer = setInterval(
    decrementIfStillTimeLeftAndNotPause, 1000)

  function decrementIfStillTimeLeftAndNotPause() {         
    const currentValue = selectTime(getState());
    const currentState = selectStatusTimer(getState());
    console.log("NOW: ", currentValue, currentState)
    if(currentState === "active") {
      if (currentValue >= 1){
        dispatch(decrement());
        console.log("in dispatch")
      }else {
        console.log("Cleared Timer", startedTimer)
        clearInterval(startedTimer);
        dispatch(timeForBreak());
        console.log("Cleared Timer", startedTimer)
      }      
    }else if(currentState === "idle"){
      console.log("IN IDLE:", currentState)
      clearInterval(startedTimer)
    } else{
      console.log("CASE IN ELSE STATemeNT")
    }
  };

}

export default timerSlice.reducer;